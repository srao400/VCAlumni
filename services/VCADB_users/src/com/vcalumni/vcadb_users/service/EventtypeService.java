/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.vcalumni.vcadb_users.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcalumni.vcadb_users.Eventtype;

/**
 * Service object for domain model class {@link Eventtype}.
 */
public interface EventtypeService {

    /**
     * Creates a new Eventtype. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Eventtype if any.
     *
     * @param eventtypeInstance Details of the Eventtype to be created; value cannot be null.
     * @return The newly created Eventtype.
     */
    Eventtype create(@Valid Eventtype eventtypeInstance);


	/**
     * Returns Eventtype by given id if exists.
     *
     * @param eventtypeId The id of the Eventtype to get; value cannot be null.
     * @return Eventtype associated with the given eventtypeId.
	 * @throws EntityNotFoundException If no Eventtype is found.
     */
    Eventtype getById(String eventtypeId);

    /**
     * Find and return the Eventtype by given id if exists, returns null otherwise.
     *
     * @param eventtypeId The id of the Eventtype to get; value cannot be null.
     * @return Eventtype associated with the given eventtypeId.
     */
    Eventtype findById(String eventtypeId);

	/**
     * Find and return the list of Eventtypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param eventtypeIds The id's of the Eventtype to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Eventtypes associated with the given eventtypeIds.
     */
    List<Eventtype> findByMultipleIds(List<String> eventtypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Eventtype. It replaces all fields of the existing Eventtype with the given eventtypeInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Eventtype if any.
     *
     * @param eventtypeInstance The details of the Eventtype to be updated; value cannot be null.
     * @return The updated Eventtype.
     * @throws EntityNotFoundException if no Eventtype is found with given input.
     */
    Eventtype update(@Valid Eventtype eventtypeInstance);

    /**
     * Deletes an existing Eventtype with the given id.
     *
     * @param eventtypeId The id of the Eventtype to be deleted; value cannot be null.
     * @return The deleted Eventtype.
     * @throws EntityNotFoundException if no Eventtype found with the given id.
     */
    Eventtype delete(String eventtypeId);

    /**
     * Deletes an existing Eventtype with the given object.
     *
     * @param eventtypeInstance The instance of the Eventtype to be deleted; value cannot be null.
     */
    void delete(Eventtype eventtypeInstance);

    /**
     * Find all Eventtypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Eventtypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Eventtype> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Eventtypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Eventtypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<Eventtype> findAll(String query, Pageable pageable);

    /**
     * Exports all Eventtypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Eventtypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Eventtypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Eventtype.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}