/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.vcalumni.vcadb_users.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.vcalumni.vcadb_users.models.procedure.AddAttendeeRequest;

@Service
public class VCADB_usersProcedureExecutorServiceImpl implements VCADB_usersProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VCADB_usersProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("VCADB_usersWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Void executeAdd_attendee(AddAttendeeRequest addAttendeeRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("email_id", addAttendeeRequest.getEmailId());
        params.put("event_id", addAttendeeRequest.getEventId());
        params.put("action_id", addAttendeeRequest.getActionId());

        return procedureExecutor.executeNamedProcedure("add_attendee", params, Void.class);
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Void executeChange_attendee(String emailId, String eventId, String actionId) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("email_id", emailId);
        params.put("event_id", eventId);
        params.put("action_id", actionId);

        return procedureExecutor.executeNamedProcedure("change_attendee", params, Void.class);
    }

}