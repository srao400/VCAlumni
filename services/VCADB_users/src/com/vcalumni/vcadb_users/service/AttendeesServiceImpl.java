/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.vcalumni.vcadb_users.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcalumni.vcadb_users.Attendees;
import com.vcalumni.vcadb_users.AttendeesId;


/**
 * ServiceImpl object for domain model class Attendees.
 *
 * @see Attendees
 */
@Service("VCADB_users.AttendeesService")
@Validated
public class AttendeesServiceImpl implements AttendeesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AttendeesServiceImpl.class);


    @Autowired
    @Qualifier("VCADB_users.AttendeesDao")
    private WMGenericDao<Attendees, AttendeesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Attendees, AttendeesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Attendees create(Attendees attendees) {
        LOGGER.debug("Creating a new Attendees with information: {}", attendees);

        Attendees attendeesCreated = this.wmGenericDao.create(attendees);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(attendeesCreated);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public Attendees getById(AttendeesId attendeesId) {
        LOGGER.debug("Finding Attendees by id: {}", attendeesId);
        return this.wmGenericDao.findById(attendeesId);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public Attendees findById(AttendeesId attendeesId) {
        LOGGER.debug("Finding Attendees by id: {}", attendeesId);
        try {
            return this.wmGenericDao.findById(attendeesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Attendees found with id: {}", attendeesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public List<Attendees> findByMultipleIds(List<AttendeesId> attendeesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Attendees by ids: {}", attendeesIds);

        return this.wmGenericDao.findByMultipleIds(attendeesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "VCADB_usersTransactionManager")
    @Override
    public Attendees update(Attendees attendees) {
        LOGGER.debug("Updating Attendees with information: {}", attendees);

        this.wmGenericDao.update(attendees);
        this.wmGenericDao.refresh(attendees);

        return attendees;
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Attendees delete(AttendeesId attendeesId) {
        LOGGER.debug("Deleting Attendees with id: {}", attendeesId);
        Attendees deleted = this.wmGenericDao.findById(attendeesId);
        if (deleted == null) {
            LOGGER.debug("No Attendees found with id: {}", attendeesId);
            throw new EntityNotFoundException(String.valueOf(attendeesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public void delete(Attendees attendees) {
        LOGGER.debug("Deleting Attendees with {}", attendees);
        this.wmGenericDao.delete(attendees);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public Page<Attendees> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Attendees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public Page<Attendees> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Attendees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service VCADB_users for table Attendees to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service VCADB_users for table Attendees to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "VCADB_usersTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}