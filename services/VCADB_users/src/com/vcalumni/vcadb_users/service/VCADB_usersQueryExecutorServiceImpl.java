/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.vcalumni.vcadb_users.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.vcalumni.vcadb_users.models.query.*;

@Service
public class VCADB_usersQueryExecutorServiceImpl implements VCADB_usersQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VCADB_usersQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("VCADB_usersWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Integer executeChangePassword(ChangePasswordRequest changePasswordRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("password", changePasswordRequest.getPassword());
        params.put("email", changePasswordRequest.getEmail());

        return queryExecutor.executeNamedQueryForUpdate("ChangePassword", params);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<RegisteredAttendeesResponse> executeRegisteredAttendees(String eventId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("event_id", eventId);

        return queryExecutor.executeNamedQuery("RegisteredAttendees", params, RegisteredAttendeesResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportRegisteredAttendees(String eventId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("event_id", eventId);

        QueryProcedureInput queryInput = new QueryProcedureInput("RegisteredAttendees", params, RegisteredAttendeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<EventsListResponse> executeEventsList(String eventtype, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("eventtype", eventtype);

        return queryExecutor.executeNamedQuery("EventsList", params, EventsListResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportEventsList(String eventtype, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("eventtype", eventtype);

        QueryProcedureInput queryInput = new QueryProcedureInput("EventsList", params, EventsListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Integer executeUpdatePassword(UpdatePasswordRequest updatePasswordRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("newpassword", updatePasswordRequest.getNewpassword());
        params.put("email", updatePasswordRequest.getEmail());

        return queryExecutor.executeNamedQueryForUpdate("updatePassword", params);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<ValidateUserResponse> executeValidateUser(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("validateUser", params, ValidateUserResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportValidateUser(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput queryInput = new QueryProcedureInput("validateUser", params, ValidateUserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<AttendeeEventDetailsResponse> executeAttendeeEventDetails(String email, String eventname, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("eventname", eventname);

        return queryExecutor.executeNamedQuery("AttendeeEventDetails", params, AttendeeEventDetailsResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportAttendeeEventDetails(String email, String eventname, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("email", email);
        params.put("eventname", eventname);

        QueryProcedureInput queryInput = new QueryProcedureInput("AttendeeEventDetails", params, AttendeeEventDetailsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<GetuserResponse> executeGetuser(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("getuser", params, GetuserResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetuser(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput queryInput = new QueryProcedureInput("getuser", params, GetuserResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<EventParticipantsResponse> executeEventParticipants(String eventname, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("eventname", eventname);

        return queryExecutor.executeNamedQuery("EventParticipants", params, EventParticipantsResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportEventParticipants(String eventname, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("eventname", eventname);

        QueryProcedureInput queryInput = new QueryProcedureInput("EventParticipants", params, EventParticipantsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<GetOldPasswordResponse> executeGetOldPassword(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("GetOldPassword", params, GetOldPasswordResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetOldPassword(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput queryInput = new QueryProcedureInput("GetOldPassword", params, GetOldPasswordResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "VCADB_usersTransactionManager")
    @Override
    public Integer executeUpdateAttendees(UpdateAttendeesRequest updateAttendeesRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("attended", updateAttendeesRequest.getAttended());
        params.put("email", updateAttendeesRequest.getEmail());
        params.put("eventname", updateAttendeesRequest.getEventname());

        return queryExecutor.executeNamedQueryForUpdate("UpdateAttendees", params);
    }

    @Transactional(value = "VCADB_usersTransactionManager", readOnly = true)
    @Override
    public Page<EventDetailsResponse> executeEventDetails(String eventId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("event_id", eventId);

        return queryExecutor.executeNamedQuery("EventDetails", params, EventDetailsResponse.class, pageable);
    }

    @Transactional(value = "VCADB_usersTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportEventDetails(String eventId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("event_id", eventId);

        QueryProcedureInput queryInput = new QueryProcedureInput("EventDetails", params, EventDetailsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}