/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.vcalumni.vcadb_users.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcalumni.vcadb_users.Events;
import com.vcalumni.vcadb_users.Venues;

/**
 * Service object for domain model class {@link Venues}.
 */
public interface VenuesService {

    /**
     * Creates a new Venues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Venues if any.
     *
     * @param venues Details of the Venues to be created; value cannot be null.
     * @return The newly created Venues.
     */
    Venues create(@Valid Venues venues);


	/**
     * Returns Venues by given id if exists.
     *
     * @param venuesId The id of the Venues to get; value cannot be null.
     * @return Venues associated with the given venuesId.
	 * @throws EntityNotFoundException If no Venues is found.
     */
    Venues getById(String venuesId);

    /**
     * Find and return the Venues by given id if exists, returns null otherwise.
     *
     * @param venuesId The id of the Venues to get; value cannot be null.
     * @return Venues associated with the given venuesId.
     */
    Venues findById(String venuesId);

	/**
     * Find and return the list of Venues by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param venuesIds The id's of the Venues to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Venues associated with the given venuesIds.
     */
    List<Venues> findByMultipleIds(List<String> venuesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Venues. It replaces all fields of the existing Venues with the given venues.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Venues if any.
     *
     * @param venues The details of the Venues to be updated; value cannot be null.
     * @return The updated Venues.
     * @throws EntityNotFoundException if no Venues is found with given input.
     */
    Venues update(@Valid Venues venues);

    /**
     * Deletes an existing Venues with the given id.
     *
     * @param venuesId The id of the Venues to be deleted; value cannot be null.
     * @return The deleted Venues.
     * @throws EntityNotFoundException if no Venues found with the given id.
     */
    Venues delete(String venuesId);

    /**
     * Deletes an existing Venues with the given object.
     *
     * @param venues The instance of the Venues to be deleted; value cannot be null.
     */
    void delete(Venues venues);

    /**
     * Find all Venues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Venues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Venues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Venues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Venues.
     *
     * @see Pageable
     * @see Page
     */
    Page<Venues> findAll(String query, Pageable pageable);

    /**
     * Exports all Venues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Venues matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Venues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Venues.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated eventses for given Venues id.
     *
     * @param venuename value of venuename; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Events instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Events> findAssociatedEventses(String venuename, Pageable pageable);

}